;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Exercise 2.47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(display "Exercise 2.47\n")

(define (make-vect x y)
  (cons x y))
(define (xcor-vect v)
  (car v))
(define (ycor-vect v)
  (cdr v))

(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))
(define (origin-frame frame)
  (car frame))
(define (edge1-frame frame)
  (cadr frame))
(define (edge2-frame frame)
  (caddr frame))
(let* ((u (make-vect 1 2))
       (v (make-vect 3 4))
       (w (make-vect 5 6))
       (f (make-frame u v w)))
  (display f) (newline)
  (display (origin-frame f)) (newline)
  (display (edge1-frame f)) (newline)
  (display (edge2-frame f)) (newline))

(define (make-frame origin edge1 edge2)
  (cons origin (cons edge1 edge2)))
(define (origin-frame frame)
  (car frame))
(define (edge1-frame frame)
  (cadr frame))
(define (edge2-frame frame)
  (cddr frame))
(let* ((u (make-vect 1 2))
       (v (make-vect 3 4))
       (w (make-vect 5 6))
       (f (make-frame u v w)))
  (display f) (newline)
  (display (origin-frame f)) (newline)
  (display (edge1-frame f)) (newline)
  (display (edge2-frame f)) (newline))
