;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Exercise 2.1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(display "Exercise 2.1\n")

; Utility procedures.
(define (gcd a b)
  (if (= b 0)
    a
    (gcd b (remainder a b))))
(define (numer x)
  (car x))
(define (denom x)
  (cdr x))
(define (print-rat x)
  (display (numer x))
  (display "/")
  (display (denom x)))
(define (add-rat x y)
  (make-rat (+ (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (sub-rat x y)
  (make-rat (- (* (numer x) (denom y))
               (* (numer y) (denom x)))
            (* (denom x) (denom y))))
(define (mul-rat x y)
  (make-rat (* (numer x) (numer y))
            (* (denom x) (denom y))))
(define (div-rat x y)
  (make-rat (* (numer x) (denom y))
            (* (denom x) (numer y))))
(define (equal-rat? x y)
  (= (* (numer x) (denom y))
     (* (numer y) (denom x))))

; Define `make-rat` such that it handles negative rationals.
(define (make-rat n d)
  (let ((g (gcd (abs n) (abs d))))
    (if (< d 0)
        (cons (/ (- n) g) (/ (- d) g))
        (cons (/ n g) (/ d g)))))

(define one-half (make-rat 1 2))
(print-rat one-half) (newline)
(define one-third (make-rat 1 3))
(print-rat (add-rat one-half one-third)) (newline)
(print-rat (mul-rat one-half one-third)) (newline)
(print-rat (add-rat one-third one-third)) (newline)
(print-rat (make-rat  1  1)) (newline)
(print-rat (make-rat  1 -1)) (newline)
(print-rat (make-rat -1  1)) (newline)
(print-rat (make-rat -1 -1)) (newline)
(print-rat (make-rat  4  7)) (newline)
(print-rat (make-rat  4 -7)) (newline)
(print-rat (make-rat -4  7)) (newline)
(print-rat (make-rat -4 -7)) (newline)
(print-rat (mul-rat (make-rat -5 4) (make-rat 1 3))) (newline)
