;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Exercise 2.20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(display "Exercise 2.20\n")

(define (same-parity first . rest)
  ;  (define (list-odds input)
  ;    (if (null? input) ;        '()
  ;        (if (odd? (car input))
  ;            (cons (car input) (list-odds (cdr input)))
  ;            (list-odds (cdr input)))))
  (define (list-odds input)
    (if (null? input)
        '()
        (let ((head (car input))
              (tail  (cdr input)))
          (if (odd? head)
              (cons head (list-odds tail))
              (list-odds tail)))))
  ;  (define (list-evens input)
  ;    (if (null? input)
  ;        '()
  ;        (if (even? (car input))
  ;            (cons (car input) (list-evens (cdr input)))
  ;            (list-evens (cdr input)))))
  (define (list-evens input)
    (if (null? input)
        '()
        (let ((head (car input))
              (tail  (cdr input)))
          (if (even? head)
              (cons head (list-evens tail))
              (list-evens tail)))))
  (if (odd? first)
      (cons first (list-odds rest))
      (cons first (list-evens rest))))

(display (same-parity 1 2 3 4 5 6 7)) (newline)
(display (same-parity 2 3 4 5 6 7)) (newline)
