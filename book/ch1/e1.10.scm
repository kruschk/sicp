;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Exercise 1.10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(display "Exercise 1.10\n")
(define (A x y)
  ;(display x " " y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

(display "\nTesting the function:\n")
(display "(A 1 10): ") (display (A 1 10))
; (A 1 10)
; `-> (A (- 1 1) (A 1 (- 10 1)))
; `-> (A 0 (A 1 9))
; `-> (A 0 (A (- 1 1) (A 1 (- 9 1))))
; `-> (A 0 (A 0 (A 1 8)))
; `-> (A 0 (A 0 (A 0 (A 1 7))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 32)))))
; `-> (A 0 (A 0 (A 0 (A 0 64))))
; `-> (A 0 (A 0 (A 0 128)))
; `-> (A 0 (A 0 256))
; `-> (A 0 512)
; `-> 1024
(display "(A 2 4): ") (display (A 2 4)) (newline)
(display "(A 3 3): ") (display (A 3 3)) (newline)

(display "\nNote: the following generalizations are for positive integers only. That excludes 0!\n")

(display "\nf(n) = A(0, n) = 2*n\n")
(define (f n) (A 0 n))
(display (f 1)) (newline)
(display (f 2)) (newline)
(display (f 3)) (newline)
(display (f 4)) (newline)
(display (f 5)) (newline)
(display (f 6)) (newline)
(display (f 7)) (newline)
(display (f 8)) (newline)

(display "\ng(n) = A(1, n) = 2^n\n")
(define (g n) (A 1 n))
(display (g 1)) (newline)
(display (g 2)) (newline)
(display (g 3)) (newline)
(display (g 4)) (newline)
(display (g 5)) (newline)
(display (g 6)) (newline)
(display (g 7)) (newline)
(display (g 8)) (newline)

(display "\ng(n) = A(2, n) = 2^(2^(2^(...))); where (n - 1) = the number of times to exponentiate the starting 2. I believe this is called \"tetration\".\n")
(define (h n) (A 2 n))
(display (h 1)) (newline)
(display (h 2)) (newline)
(display (h 3)) (newline)
(display (h 4)) (newline)
; Any higher will cause a crash.
