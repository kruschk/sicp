; Exercise 1.10
(define (A x y)
  ;(print x " " y)
  (cond ((= y 0) 0)
        ((= x 0) (* 2 y))
        ((= y 1) 2)
        (else (A (- x 1)
                 (A x (- y 1))))))

(print "Testing the function:")
(print "(A 1 10): " (A 1 10))
; (A 1 10)
; `-> (A (- 1 1) (A 1 (- 10 1)))
; `-> (A 0 (A 1 9))
; `-> (A 0 (A (- 1 1) (A 1 (- 9 1))))
; `-> (A 0 (A 0 (A 1 8)))
; `-> (A 0 (A 0 (A 0 (A 1 7))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 1 6)))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 5))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 4)))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 3))))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 2)))))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 1 1))))))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 2)))))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 4))))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 8)))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 (A 0 16))))))
; `-> (A 0 (A 0 (A 0 (A 0 (A 0 32)))))
; `-> (A 0 (A 0 (A 0 (A 0 64))))
; `-> (A 0 (A 0 (A 0 128)))
; `-> (A 0 (A 0 256))
; `-> (A 0 512)
; `-> 1024
(print "(A 2 4): " (A 2 4))
(print "(A 3 3): " (A 3 3) "\n")

(print "Note: the following generalizations are for positive integers only. That excludes 0!\n")

(print "f(n) = A(0, n) = 2*n")
(define (f n) (A 0 n))
(print (f 1))
(print (f 2))
(print (f 3))
(print (f 4))
(print (f 5))
(print (f 6))
(print (f 7))
(print (f 8) "\n")

(print "g(n) = A(1, n) = 2^n")
(define (g n) (A 1 n))
(print (g 1))
(print (g 2))
(print (g 3))
(print (g 4))
(print (g 5))
(print (g 6))
(print (g 7))
(print (g 8) "\n")

(print "g(n) = A(2, n) = 2^(2^(2^(...))); where (n - 1) = the number of times to exponentiate the starting 2. I believe this is called \"tetration\".")
(define (h n) (A 2 n))
(print (h 1))
(print (h 2))
(print (h 3))
(print (h 4))
; Any higher will cause a crash.
